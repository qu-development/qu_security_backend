[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qu-security-backend"
version = "1.0.0"
description = "QU Security Backend - Django REST API"
authors = [{name = "Mario Tamayo", email = "mario.tamayo@lighthousetech.io"}]
readme = "README.md"
requires-python = ">=3.11"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "staticfiles",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # Pyflakes
    "I",       # isort
    "N",       # pep8-naming
    "DJ",      # flake8-django
    "UP",      # pyupgrade
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "PIE",     # flake8-pie
    "SIM",     # flake8-simplify
    "TCH",     # flake8-type-checking
]

ignore = [
    "E501",    # line too long, handled by formatter
    "B008",    # do not perform function calls in argument defaults
    "B904",    # raise from within except
    "N806",    # variable in function should be lowercase (Django models)
    "DJ001",   # avoid using null=True on string-based fields
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.ruff.lint.isort]
# Django-specific isort configuration
known-first-party = ["qu_security", "core"]
known-third-party = ["django", "rest_framework", "corsheaders"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"**/tests/**/*" = [
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of assert detected
    "TID252",   # Relative imports from parent modules are banned
]

# Django settings files can have long lines and unused imports
"**/settings/**" = ["E501", "F401"]
"settings.py" = ["E501", "F401"]

# Migration files are auto-generated
"**/migrations/**" = ["ALL"]

[tool.bandit]
# Bandit security scanner configuration
exclude_dirs = [
    "tests",
    "core/tests",
    "migrations",
    ".venv",
    "venv",
    "staticfiles",
    "__pycache__"
]

# Skip certain test IDs that are common false positives in Django projects
skips = [
    "B101",  # assert_used - common in tests and Django's debug mode
    "B106",  # hardcoded_password_funcarg - common in test files
    "B601",  # paramiko_calls - if using paramiko legitimately
    "B324",  # hashlib_insecure_functions - Django uses some for non-crypto purposes
]

# Confidence levels: LOW, MEDIUM, HIGH
confidence = "MEDIUM"

# Severity levels: LOW, MEDIUM, HIGH
severity = "MEDIUM"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "qu_security.settings"
python_files = ["test_*.py", "*_test.py"]
addopts = "-ra"
filterwarnings = [
    "ignore::DeprecationWarning",
]
