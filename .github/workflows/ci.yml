name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff pre-commit
        pip install -r requirements.txt
        pip install types-pytz django-stubs djangorestframework-stubs

    - name: Run Ruff Linter
      run: |
        ruff check . --output-format=github

    - name: Run Ruff Formatter Check
      run: |
        ruff format --check .

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    name: Django Tests
    needs: lint-and-format

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_qu_security
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DEBUG=True" >> .env
        echo "DB_NAME=test_qu_security" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "USE_S3=False" >> .env

    - name: Run database migrations
      run: |
        python manage.py migrate

    - name: Run pytest
      run: |
        pytest -q

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m pytest
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: lint-and-format

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run Bandit Security Scan
      run: |
        bandit -c pyproject.toml -r . -f json -o bandit-report.json || true
        bandit -c pyproject.toml -r . -f txt

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS Lambda
    needs: [lint-and-format, test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy with Zappa
      run: |
        # Set VIRTUAL_ENV to trick Zappa into thinking we're in a virtual environment
        export VIRTUAL_ENV="$pythonLocation"
        # Since the application already exists, use update
        zappa update dev

    - name: Run post-deployment tasks
      run: |
        echo "Deployment completed successfully!"
        echo "API URL: https://wr60a2rc2j.execute-api.us-east-2.amazonaws.com/dev"
